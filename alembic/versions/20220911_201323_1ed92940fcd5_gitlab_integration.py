"""gitlab integration

Revision ID: 1ed92940fcd5
Revises: 32cc41a4f885
Create Date: 2022-09-11 20:13:23.683468

"""

# revision identifiers, used by Alembic.
revision = '1ed92940fcd5'
down_revision = '32cc41a4f885'
branch_labels = None
depends_on = None

from alembic import op
import sqlalchemy as sa
from sqlalchemy.orm import sessionmaker
import re
import colors

Session = sessionmaker()


def upgrade():
    bind = op.get_bind()
    session = Session(bind=bind)

    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('projects', sa.Column('gitlab_url', sa.String(length=256), nullable=True))
    op.add_column('tasks', sa.Column('git_branch', sa.String(length=256), nullable=True))

    # Детектим название ветки в tasks.subject
    q = session.execute("select * from tasks where subject similar to '% \[(feature|bugfix|refactor)/%\]'")
    for task in q:
        r = re.search(r' \[((feature|bugfix|refactor)/[\w_-]+)\]', task['subject'])
        if r:
            subject = task['subject'].replace(r.group(0), '')
            git_branch = r.group(1)
            session.execute(
                'UPDATE tasks SET git_branch = :branch, subject = :subject WHERE id = :id',
                {'id': task['id'], 'branch': git_branch, 'subject': subject}
            )

    # Детектим комментарии с ветками
    q = session.execute('''
            select * from task_comments
            where
                body like 'feature/%' or body like '`feature/%' or
                body like 'bugfix/%' or body like '`bugfix/%' or
                body like 'refactor/%' or body like '`refactor/%'
            order by created
        ''')
    for comment in q:
        r = re.match(r'`?(feature|bugfix|refactor)/[\w_-]+', comment['body'])
        if not r:
            raise ValueError('Regexp fail')
        branch = r.group(0).replace('`', '')
        body = comment['body'].replace(r.group(0), '').strip()

        session.execute("UPDATE tasks SET git_branch = :branch WHERE id = :id", {'id': comment['task_id'], 'branch': branch})

        # Если в комменте была только ветка, то стираем коммент, иначе — редактируем
        if body:
            session.execute("UPDATE task_comments SET body = :body WHERE id = :id", {'id': comment['id'], 'body': body})
        else:
            session.execute('DELETE FROM task_comments WHERE id = :id', {'id': comment['id']})
            session.execute('UPDATE tasks SET cnt_comments = cnt_comments - 1 WHERE id = :id', {'id': comment['task_id']})
            session.execute(
                'UPDATE task_comments_seen SET cnt_comments = cnt_comments - 1 WHERE task_id = :task_id AND seen >= :comment_created',
                {'task_id': comment['task_id'], 'comment_created': comment['created']}
            )

    session.execute("DELETE FROM task_comments_seen WHERE cnt_comments = 0")

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('tasks', 'git_branch')
    op.drop_column('projects', 'gitlab_url')
    # ### end Alembic commands ###
